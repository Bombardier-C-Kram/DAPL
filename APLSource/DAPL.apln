:NameSpace DAPL
⍝ I would like to change to class, and then make this more of a library instead of a self contained bot, so one can simply import this library using tatin, and then create their own bot.
    ⎕IO←0 ⋄ ⎕ML←1
    env←⎕NEW #.DAPL.DotEnvAPL


    ⍝ The following functions are just copied from HTTPCommand
    NL←⎕UCS 13 10
    fromutf8←{0::(⎕AV,'?')[⎕AVU⍳⍵] ⋄ 'UTF-8'⎕UCS ⍵} ⍝ Turn raw UTF-8 input into text
    utf8←{3=10|⎕DR ⍵: 256|⍵ ⋄ 'UTF-8' ⎕UCS ⍵}
    sint←{⎕io←0 ⋄ 83=⎕DR ⍵:⍵ ⋄ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 ¯128 ¯127 ¯126 ¯125 ¯124 ¯123 ¯122 ¯121 ¯120 ¯119 ¯118 ¯117 ¯116 ¯115 ¯114 ¯113 ¯112 ¯111 ¯110 ¯109 ¯108 ¯107 ¯106 ¯105 ¯104 ¯103 ¯102 ¯101 ¯100 ¯99 ¯98 ¯97 ¯96 ¯95 ¯94 ¯93 ¯92 ¯91 ¯90 ¯89 ¯88 ¯87 ¯86 ¯85 ¯84 ¯83 ¯82 ¯81 ¯80 ¯79 ¯78 ¯77 ¯76 ¯75 ¯74 ¯73 ¯72 ¯71 ¯70 ¯69 ¯68 ¯67 ¯66 ¯65 ¯64 ¯63 ¯62 ¯61 ¯60 ¯59 ¯58 ¯57 ¯56 ¯55 ¯54 ¯53 ¯52 ¯51 ¯50 ¯49 ¯48 ¯47 ¯46 ¯45 ¯44 ¯43 ¯42 ¯41 ¯40 ¯39 ¯38 ¯37 ¯36 ¯35 ¯34 ¯33 ¯32 ¯31 ¯30 ¯29 ¯28 ¯27 ¯26 ¯25 ¯24 ¯23 ¯22 ¯21 ¯20 ¯19 ¯18 ¯17 ¯16 ¯15 ¯14 ¯13 ¯12 ¯11 ¯10 ¯9 ¯8 ¯7 ¯6 ¯5 ¯4 ¯3 ¯2 ¯1[utf8 ⍵]}
    lc←(819⌶) ⍝ lower case conversion
    uc←1∘lc   ⍝ upper case conversion
    ci←{(lc ⍺)⍺⍺ lc ⍵} ⍝ case insensitive operator
    deb←' '∘(1↓,(/⍨)1(⊢∨⌽)0,≠) ⍝ delete extraneous blanks
    dlb←{(+/∧\' '=⍵)↓⍵} ⍝ delete leading blanks
    dltb←{⌽dlb⌽dlb ⍵} ⍝ delete leading and trailing blanks
    iotaz←((≢⊣)(≥×⊢)⍳)
    nameClass←{⎕NC⊂,'⍵'} ⍝ name class of argument
    splitOnFirst←{(⍺↑⍨¯1+p)(⍺↓⍨p←⌊/⍺⍳⍵)} ⍝ split ⍺ on first occurrence of ⍵ (removing first ⍵)
    splitOn←≠⊆⊣ ⍝ split ⍺ on all ⍵ (removing ⍵)
    h2d←{⎕IO←0 ⋄ 16⊥'0123456789abcdef'⍳lc ⍵} ⍝ hex to decimal
    d2h←{⎕IO←0 ⋄ '0123456789ABCDEF'[16(⊥⍣¯1)⍵]} ⍝ decimal to hex
    getchunklen←{¯1=len←¯1+⊃(NL⍷⍵)/⍳⍴⍵:¯1 ¯1 ⋄ chunklen←h2d len↑⍵ ⋄ (⍴⍵)<len+chunklen+4:¯1 ¯1 ⋄ len chunklen}
    toInt←{0∊⍴⍵:⍬ ⋄ ~3 5∊⍨10|⎕DR t←1⊃2⊃⎕VFI ⍕⍵:⍬ ⋄ t≠⌊t:⍬ ⋄ t} ⍝ simple char to int
    makeHeaders←{0∊⍴⍵:0 2⍴⊂'' ⋄ 2=⍴⍴⍵:⍵ ⋄ ↑2 eis ⍵} ⍝ create header structure [;1] name [;2] value
    fmtHeaders←{0∊⍴⍵:'' ⋄ (firstCaps¨⍵[;0])(,∘⍕¨⍵[;1])} ⍝ formatted HTTP headers
    firstCaps←{1↓{(¯1↓0,'-'=⍵) (819⌶)¨ ⍵}'-',⍵} ⍝ capitalize first letters e.g. Content-Encoding
    addHeader←{'∘???∘'≡⍺⍺ Lookup ⍺:⍺⍺⍪⍺ ⍵ ⋄ ⍺⍺} ⍝ add a header unless it's already defined
    setHeader←{(≢⍺⍺)<i←⍺⍺(⍳ci)eis ⍺:⍺⍺⍪⍺ ⍵ ⋄ ⍺⍺⊣⍺⍺[i;2]←⊆,⍵}
    tableGet←{⍺[;2]/⍨⍺[;1](≡ ci)¨⊂⍵}
    endsWith←{∧/⍺=⍵↑⍨-≢⍺}
    beginsWith←{∧/⍺=⍵↑⍨≢⍺}
    extractPath←{⍵↑⍨1⌈¯1+⊢/⍸'/'=⍵}∘,
    isChar←{1≥|≡⍵:0 2∊⍨10|⎕DR {⊃⍣(0∊⍴⍵)⊢⍵}⍵ ⋄ ∧/∇¨⍵}
    isSimpleChar←{1≥|≡⍵: isChar ⍵ ⋄ 0}
    isJSON←{~0 2∊⍨10|⎕DR ⍵:0 ⋄ ~(⊃⍵)∊'-{["',⎕D:0 ⋄ {0::0 ⋄1⊣0 ⎕JSON ⍵}⍵} ⍝ test for JSONableness fails on APL that looks like JSON (e.g. '"abc"')
    stopIf←{1∊⍵:-⎕TRAP←0 'C' '⎕←''Stopped for debugging... (Press Ctrl-Enter)''' ⋄ shy←0} ⍝ faster alternative to setting ⎕STOP
    assert←{⍺←'assertion failure' ⋄ 0∊⍵:⍺ ⎕SIGNAL 8 ⋄ shy←0}


    port←443
    gatewayHost←'gateway.discord.gg'
    discordAPIVersion←'9'

    gatewayURI←'/?v=',discordAPIVersion,'&encoding=json'
    BufferSize←100000
    Token←env.getEnv 'DISCORD_TOKEN'
    ⍝Token←''
    DRC←⍬

    ⍝ HBPayload only needs to be set once, since its the same always after!
    HeartBeatPayload←1 ⎕JSON ##.Payload.GeneratePayload(1 (⊂'null')(⊂'null')(⊂'null'))

    ∇ r←Run
     
    ⍝ Errors still happen frequantly with this... I think its because when I interrupt, it doesnt stop properly.
    ⍝ Probably a better exit method would be better, so that DRC.Close'c1' happens.
      :If ∨/9≠⌊⎕NC'Conga' 'DRC'
          'Conga'⎕CY'conga'
          DRC←Conga.Init''
      :EndIf
      :If 0≠⍴DRC.Names''
          DRC.Close'c1'
      :EndIf
      hdrs←makeHeaders ⍬
      hdrs←'Host'(hdrs addHeader)gatewayHost ⍝  Not needed ,(':',⍕port)
      hdrs←'User-Agent'(hdrs addHeader)'IDontKnow/DiscordAPL' ⍝ TODO
      hdrs←'Accept'(hdrs addHeader)'*/*'
      headers←fmtHeaders hdrs
      ⍝ I am not actually sending these headers, as I couldnt figure out how, however I really want to send them
     
      ⍝ The SSLValidation is also not working as I am not sure how to get the SSL CA certs.
     
      cert←⊃DRC.X509Cert.ReadCertFromFile'cert/cert.pem'
      cert.KeyOrigin←'DER'('cert/key.pem')
     
     
      DRC.Clt'c1'gatewayHost port'http' 100000('X509'cert)('SSLValidation' 1)('Options'DRC.Options.WSAutoUpgrade)
      DRC.SetProp'c1' 'WSUpgrade'(gatewayURI gatewayHost'')
      r←DRC.Wait'c1'
     
      ⍝ Discord says hello!
      Hello←DRC.Wait'c1'
      data←0 ⎕JSON⊃↑Hello[3]
      hbi←data.d.heartbeat_interval
     
      ⍝ Lets identify ourselves. We need access to GUILDS and GUILD_MESSAGES intents for now
      ⍝ Not case sensitive for intents params (And no I don't suck THAT much at typing!)
      Identify←(⎕NEW ##.Payloads.Identify(Token('gUiLDS' 'GUILD_MESSAGES' 'MESSAGE_CONTENT'))).Pld
      IdntPld←1 ⎕JSON ##.Payload.GeneratePayload(Identify.op Identify.pld(⊂'null')(⊂'null'))
      DRC.Send'c1'(IdntPld 1)
     
      ⍝ Spawn a new thread, and then wait for that thread. I am starting to think this is unnessacary though.
      ⍝ Causing more problems then not
      elThread←el&1⍴hbi
     
      ⎕TSYNC elThread
      ⎕←'Shutting Down!'
      DRC.Close'c1'
    ∇

    ⍝ Copied from HTTPCommand
    ∇ r←table Lookup name
    ⍝ lookup a name/value-table value by name, return '∘???∘' if not found
      r←table{(⍺[;1],⊂'∘???∘')⊃⍨⍺[;0](⍳ci)eis ⍵}name
    ∇

    ⍝ HTTPCommand
    ∇ r←{a}eis w;f
      ⍝ enclose if simple
      :Access public shared
      f←{⍺←1 ⋄ ,(⊂⍣(⍺=|≡⍵))⍵}
      :If 0=⎕NC'a' ⋄ r←f w
      :Else ⋄ r←a f w
      :EndIf
    ∇

    ∇ r←hb hbi
    ⍝ Wait hbi (heartBeatInterval) milliseconds, and then Send heartbeat
      :Access public shared
      ⎕TNAME←'hb'
      ⎕DL hbi÷1000
      DRC.Send'c1'(HeartBeatPayload 1)
    ∇

    ∇ r←el(hbi)
    ⍝ Event Listener and main thread after init
      :Access public shared
      ⎕TNAME←'el'
      ⍝ Initilise variable
      hbThread←⍬
      :While 1
          :If 1≢(hbThread∊⎕TNUMS)
             ⍝ Heartbeat thread does not exist, lets now make a new heartbeat thread.
            ⍝ We don't want gateway to think that we are dead!
              hbThread←hb&hbi
          :EndIf
     
     
          ⍝ Do we have any new info from gateway?
          r←DRC.Wait'c1'
     
          :If r[0]=100
            ⍝ Timeout, nothing new.
          :Else
            ⍝ Ooh! We have some new info, lets take a look!
     
            ⍝ JSON
              j←0 ⎕JSON⊃↑r[3]
     
              ⍝ Write event to a file for debug
              ⍝ 'events/',('events-',⍕⎕AI[2]),'.json' (⎕NPUT⍨∘⊂)⊃↑r[3]


              3 ⎕MKDIR 'events/'
              (('events/',('events-',⍕⎕AI[2]),'.json')(⎕NPUT⍨∘⊂)⊃↑r[3])
     
     
              :If j.op=11
                ⍝ We got a heartbeat ack!
                  ⎕←'Heartbeat'
              :Else
                ⍝ We have a new event that is not heartbeat ack (At some point, should check that op=0)
                  ⎕←'Got a new event'
     
                  ⍝ If you want to look at data recived, there is JSONWindow which can help visualise data
     
                  ⍝ Lets add some commands!
                  ⍝ If the type of event was a MESSAGE_CREATE event
                  :If j.t≡'MESSAGE_CREATE'
                    ⍝ Data recived is a message, lets see what the content is.
                      content←j.d.content
     
                      ⍝ If the content is APL
                      :If content≡'APL'
                        ⍝ Then we know the author is talking sense! Lets send them a nice little message back!
     
                        ⍝ Lets add a nice little embed, with title APL, and description Its pretty cool
                          embed←(⎕NEW ##.Payloads.Embed('APL' 'Its pretty cool')).Pld
     
                          ⍝ Create a Message Payload
                          MessagePld←(⎕NEW ##.Payloads.SendMessage('A cool language of thought'embed)).Pld
     
                          ⍝ Send back the message to the channel that it came from!
                          endpoint←'/channels/',j.d.channel_id,'/messages'
     
                          ⍝ Send and we now have a response
                          response←API(endpoint'POST'MessagePld)
     
                          ⍝ Later parse response to check for errors maybe, or perhaps that should go to API class.
                      :ElseIf ')eval '(⊃⍷)content
                          ⍝ New command!
                          ⍝ )eval will evaluate the statement provided after a space.
                          ⍝ If this were a public facing bot, obviously this should use https://github.com/abrudz/dyalog-safe-exec
                          args←1∘↓(' '(~⍤∊⍨⊆⊢)content)
                          arg←↑,/' '(1↓∘,,⍤0)args
     
                          :Trap 0
                              ⍝ Try to execute
                              response←⍎arg
                          :Else
                              ⍝ Error happend, oh no!
                              response←'An error occured while evaluating...'
                          :EndTrap
                          ⍝ Format the response to be a string!
                          msg←{¯1↓∊({(+/∨\' '≠⌽⍵)↑¨↓⍵}⎕FMT ⍵),¨⎕UCS 10}response
     
                          ⍝ Make a lovely discord codebox!
                          msg←'```',msg,'```'
     
                          ⍝ Stick the codebox into the embed!
                          embed←(⎕NEW ##.Payloads.Embed('Evaluated expression'msg)).Pld
     
                          ⍝ Make message payload
                          MessagePld←(⎕NEW ##.Payloads.SendMessage('Here is your evaluated payload!'embed)).Pld
     
                          ⍝ Send back to channel it came from!
                          endpoint←'/channels/',j.d.channel_id,'/messages'
     
                          ⍝ Send and now we have a response!
                          response←API(endpoint'POST'MessagePld)
     
                          ⍝ Later parse response
                      :EndIf
                  :EndIf
              :EndIf
          :EndIf
      :EndWhile
    ∇

    ∇ r←API(endpoint type data)
    ⍝ endpoint: Endpoint to send to
    ⍝ type: HTTP type of request (GET or POST)
    ⍝ data: If request is a POST request, data to send
     
    ⍝ API Base
      base←'https://discord.com/api/v',discordAPIVersion
      url←base,endpoint
     
     
      :If type≡'POST'
        ⍝ Make sure data and endpoint exist!
          assert data≢⍬
          assert endpoint≢0
     
          cmd←⎕SE.SALT.New'HttpCommand'
          cmd.(Command URL)←'POST'url
          ⍝ Format data to be JSON format
          cmd.Params←SafeJSON 1 ⎕JSON data
     
          ⍝ Tell we are using JSON to send!
          cmd.ContentType←'application/json;charset=utf-8'
     
          ⍝ We add header: 'Authorization: Bot TOKENHERE'
          'Authorization'cmd.AddHeader'Bot ',Token
          response←cmd.Run.Data
      :Else
        ⍝ Confirm endpoint exists
          assert endpoint≢0
     
          cmd←⎕SE.SALT.New'HttpCommand'
          cmd.(Command URL)←'GET'url
     
          ⍝ Tell we are using JSON!
          cmd.ContentType←'application/json;charset=utf-8'
     
          ⍝ We add header: 'Authorization: Bot TOKENHERE'
          'Authorization'cmd.AddHeader'Bot ',Token
          response←cmd.Run.Data
      :EndIf
     
     ⍝ Format response as APL structure
      r←0 ⎕JSON response
    ∇

    ∇ w←SafeJSON w;i;c;⎕IO
    ⍝ Convert Unicode chars to \uXXXX
      :Access public shared
      ⎕IO←0
      →0⍴⍨0∊i←⍸127<c←⎕UCS w
      w[i]←{⊂'\u','0123456789ABCDEF'[¯4↑16⊥⍣¯1⊢⍵]}¨c[i]
      w←∊w
    ∇


    ∇ JSONWindow json
      :Access public shared
      ⍝ Make a JSON popup window, in case you want to easily visualise the data recived. (Dark mode)
      html←'<link rel=stylesheet href=https://cdn.jsdelivr.net/npm/pretty-print-json@1.1/dist/pretty-print-json.dark-mode.css>'
      html←html,'<script src=https://cdn.jsdelivr.net/npm/pretty-print-json@1.1/dist/pretty-print-json.min.js></script>'
      html←html,'<pre id=data></pre>'
      html←html,'<script>'
      html←html,'const data = ',json,';'
      html←html,'const elem = document.getElementById(''data'');'
      html←html,'elem.innerHTML = prettyPrintJson.toHtml(data);'
      html←html,'</script>'
      size←150 250
      coord←'ScaledPixel'
     
      ⍝ Create window using a random ID (So that multipule windows can be open at once)
      (⎕UCS 65+(5?25))⎕WC'HTMLRenderer'('HTML'html)('Size'size)('Coord'coord)
    ∇

:EndNamespace
